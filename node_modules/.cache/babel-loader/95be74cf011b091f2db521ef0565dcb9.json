{"ast":null,"code":"var _jsxFileName = \"/home/jimd325/projects/courses/401/classRepo/seattle-javascript-401n21/classes/class-26/lab/RESTy/starter-code/src/components/form/form.tsx\",\n    _s = $RefreshSig$();\n\nimport './form.scss';\nimport { Body } from \"../body/body\";\nimport { useReducer } from 'react'; // everything with these properties will be treated as the type \"FormState\"\n// interface is used to make types that you specify. \n// follows principals of \"duck typing\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//Change state.body to undefined if the a method is selected which does not require the body\nexport const changeMethod = (state, method) => {\n  if (method === \"GET\" || method === \"PUT\") {\n    state.body = undefined;\n  }\n\n  return { ...state,\n    method\n  };\n}; // Change state.body to an object if the a method is selected which does not require the body\n\nexport const setBody = (state, body) => {\n  if (state.method !== \"GET\" && state.method !== \"PUT\") {\n    state.body = body;\n  }\n\n  ;\n  return state;\n};\nexport const dispatchAction = (state, action) => {\n  switch (action.action) {\n    case 'method':\n      // as used below is a type assertion, and tells the compiler to consider the type as other than the type potentially inferred by the compiler. because type is set to unkown, we can specify that the type of action.body should be the type of what is to the right of the as keyword. \n      return changeMethod(state, action.body);\n\n    case 'body':\n      return setBody(state, action.body);\n\n    default:\n      return state;\n  }\n};\nexport const Form = props => {\n  _s();\n\n  // const [url, setUrl] = useState('');\n  // const [method, setMethod] = useState(null);\n  // const handleSubmit = (e: any, callback: Function) => {\n  //   e.preventDefault();\n  //   let formData = {\n  //     method: method,\n  //     url: e.target[0].value,\n  //   };\n  //   callback(formData);\n  // }\n  // const handleMethodChange = (e: any) => {\n  //   e.preventDefault();\n  //   setMethod(e.target.value);\n  // }\n  const [state, dispatch] = useReducer(dispatchAction, {\n    method: \"GET\",\n    url: \"http://localhost:3000\",\n    body: undefined,\n    response: undefined\n  });\n\n  const updateBody = body => {\n    dispatch({\n      action: 'body',\n      body: {}\n    });\n  };\n\n  const updateMethod = (e, method) => {\n    e.preventDefault();\n    dispatch({\n      action: \"method\",\n      body: method\n    });\n    console.log(\"method on updateMethod-->\", state);\n  }; // onSubmit={(e) => handleSubmit(e, props.APICall)}\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Enter URL: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"url\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"GO!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"methods\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(e, \"GET\"),\n          value: \"GET\",\n          children: \"GET\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(e, \"POST\"),\n          value: \"POST\",\n          children: \"POST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(e, \"PUT\"),\n          value: \"PUT\",\n          children: \"PUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(\"DELETE\"),\n          value: \"DELETE\",\n          children: \"DELETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Body, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Form, \"c5PCo1Dx9YbytRU20FVb014ESDU=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["Body","useReducer","changeMethod","state","method","body","undefined","setBody","dispatchAction","action","Form","props","dispatch","url","response","updateBody","updateMethod","e","preventDefault","console","log"],"sources":["/home/jimd325/projects/courses/401/classRepo/seattle-javascript-401n21/classes/class-26/lab/RESTy/starter-code/src/components/form/form.tsx"],"sourcesContent":["\nimport './form.scss';\nimport { Body } from \"../body/body\"\nimport { useState, useReducer, useCallback } from 'react';\n\n\n// everything with these properties will be treated as the type \"FormState\"\n// interface is used to make types that you specify. \n// follows principals of \"duck typing\"\ninterface FormState {\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n  url: string;\n  body: object | undefined;\n  response: object | undefined;\n}\n\n//Change state.body to undefined if the a method is selected which does not require the body\nexport const changeMethod = (\n  state: FormState,\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n) => {\n  if (method === \"GET\" || method === \"PUT\") {\n    state.body = undefined\n  } return {\n    ...state, method\n  };\n};\n\n// Change state.body to an object if the a method is selected which does not require the body\nexport const setBody = (\n  state: FormState,\n  body: object\n) => {\n  if (state.method !== \"GET\" && state.method !== \"PUT\") {\n    state.body = body;\n  };\n  return state;\n}\n\nexport const dispatchAction = (\n  state: FormState,\n  action: {\n    action: string,\n    body: unknown,\n  }) => {\n  switch (action.action) {\n    case 'method':\n      // as used below is a type assertion, and tells the compiler to consider the type as other than the type potentially inferred by the compiler. because type is set to unkown, we can specify that the type of action.body should be the type of what is to the right of the as keyword. \n      return changeMethod(state, action.body as 'GET' | 'POST' | 'PUT' | \"DELETE\");\n    case 'body':\n      return setBody(state, action.body as object);\n    default:\n      return state;\n  }\n}\n\nexport const Form = (props: any) => {\n  // const [url, setUrl] = useState('');\n  // const [method, setMethod] = useState(null);\n\n  // const handleSubmit = (e: any, callback: Function) => {\n  //   e.preventDefault();\n  //   let formData = {\n  //     method: method,\n  //     url: e.target[0].value,\n  //   };\n  //   callback(formData);\n  // }\n\n  // const handleMethodChange = (e: any) => {\n  //   e.preventDefault();\n  //   setMethod(e.target.value);\n  // }\n\n  const [state, dispatch] = useReducer(dispatchAction, {\n    method: \"GET\",\n    url: \"http://localhost:3000\",\n    body: undefined,\n    response: undefined\n  });\n\n  const updateBody = (body: object) =>{\n    dispatch({action: 'body', body:{}})\n  }\n\n  const updateMethod = (e:any, method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\") => {\n    e.preventDefault();\n    dispatch ({action: \"method\", body: method})\n    console.log(\"method on updateMethod-->\", state);\n  }\n  // onSubmit={(e) => handleSubmit(e, props.APICall)}\n\n  return (\n    <>\n      <form >\n        <label >\n          <span>Enter URL: </span>\n          <input name='url' type='text' />\n          <button type=\"submit\">GO!</button>\n        </label>\n        <div className=\"methods\">\n          <button onClick={(e) => updateMethod(e,\"GET\")} value=\"GET\" >GET</button>\n          <button onClick={(e) => updateMethod(e,\"POST\")} value=\"POST\">POST</button>\n          <button onClick={(e) => updateMethod(e, \"PUT\")} value=\"PUT\">PUT</button>\n          <button onClick={(e) => updateMethod(\"DELETE\")} value=\"DELETE\">DELETE</button>\n        </div>\n      </form>\n      <Body />\n    </>\n  );\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}