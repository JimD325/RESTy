{"ast":null,"code":"'use strict'; // ### Module dependencies\n\nvar colors = require('colors/safe');\n\nvar Utils = require('./utils');\n\nvar conflictChars = /[^\\w\\s\\n\\r\\v\\t\\.,]/i;\nexports.version = require('../package.json').version; // Helper function to detect if an object should be printed or ignored\n\nvar isPrintable = function (input, options) {\n  return input !== undefined || options.renderUndefined;\n}; // Helper function to detect if an object can be directly serializable\n\n\nvar isSerializable = function (input, onlyPrimitives, options) {\n  if (typeof input === 'boolean' || typeof input === 'number' || typeof input === 'function' || input === null || input === undefined || input instanceof Date) {\n    return true;\n  }\n\n  if (typeof input === 'string' && input.indexOf('\\n') === -1) {\n    return true;\n  }\n\n  if (options.inlineArrays && !onlyPrimitives) {\n    if (Array.isArray(input) && isSerializable(input[0], true, options)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar addColorToData = function (input, options) {\n  if (options.noColor) {\n    return input;\n  }\n\n  if (typeof input === 'string') {\n    // Print strings in regular terminal color\n    return options.stringColor ? colors[options.stringColor](input) : input;\n  }\n\n  var sInput = input + '';\n\n  if (input === true) {\n    return colors.green(sInput);\n  }\n\n  if (input === false) {\n    return colors.red(sInput);\n  }\n\n  if (input === null || input === undefined) {\n    return colors.grey(sInput);\n  }\n\n  if (typeof input === 'number') {\n    if (input >= 0) {\n      return colors[options.positiveNumberColor](sInput);\n    } else {\n      return colors[options.negativeNumberColor](sInput);\n    }\n  }\n\n  if (typeof input === 'function') {\n    return 'function() {}';\n  }\n\n  if (Array.isArray(input)) {\n    return input.join(', ');\n  }\n\n  return sInput;\n};\n\nvar colorMultilineString = function (options, line) {\n  if (options.multilineStringColor === null || options.noColor) {\n    return line;\n  } else {\n    return colors[options.multilineStringColor](line);\n  }\n};\n\nvar indentLines = function (string, spaces, options) {\n  var lines = string.split('\\n');\n  lines = lines.map(function (line) {\n    return Utils.indent(spaces) + colorMultilineString(options, line);\n  });\n  return lines.join('\\n');\n};\n\nvar renderToArray = function (data, options, indentation) {\n  if (typeof data === 'string' && data.match(conflictChars) && options.escape) {\n    data = JSON.stringify(data);\n  }\n\n  if (!isPrintable(data, options)) {\n    return [];\n  }\n\n  if (isSerializable(data, false, options)) {\n    return [Utils.indent(indentation) + addColorToData(data, options)];\n  } // Unserializable string means it's multiline\n\n\n  if (typeof data === 'string') {\n    return [Utils.indent(indentation) + colorMultilineString(options, '\"\"\"'), indentLines(data, indentation + options.defaultIndentation, options), Utils.indent(indentation) + colorMultilineString(options, '\"\"\"')];\n  }\n\n  if (Array.isArray(data)) {\n    // If the array is empty, render the `emptyArrayMsg`\n    if (data.length === 0) {\n      return [Utils.indent(indentation) + options.emptyArrayMsg];\n    }\n\n    var outputArray = [];\n    data.forEach(function (element) {\n      if (!isPrintable(element, options)) {\n        return;\n      } // Prepend the dash at the begining of each array's element line\n\n\n      var line = '- ';\n\n      if (!options.noColor) {\n        line = colors[options.dashColor](line);\n      }\n\n      line = Utils.indent(indentation) + line; // If the element of the array is a string, bool, number, or null\n      // render it in the same line\n\n      if (isSerializable(element, false, options)) {\n        line += renderToArray(element, options, 0)[0];\n        outputArray.push(line); // If the element is an array or object, render it in next line\n      } else {\n        outputArray.push(line);\n        outputArray.push.apply(outputArray, renderToArray(element, options, indentation + options.defaultIndentation));\n      }\n    });\n    return outputArray;\n  }\n\n  if (data instanceof Error) {\n    return renderToArray({\n      message: data.message,\n      stack: data.stack.split('\\n')\n    }, options, indentation);\n  } // If values alignment is enabled, get the size of the longest index\n  // to align all the values\n\n\n  var maxIndexLength = options.noAlign ? 0 : Utils.getMaxIndexLength(data);\n  var key;\n  var output = [];\n  Object.getOwnPropertyNames(data).forEach(function (i) {\n    if (!isPrintable(data[i], options)) {\n      return;\n    } // Prepend the index at the beginning of the line\n\n\n    key = i + ': ';\n\n    if (!options.noColor) {\n      key = colors[options.keysColor](key);\n    }\n\n    key = Utils.indent(indentation) + key; // If the value is serializable, render it in the same line\n\n    if (isSerializable(data[i], false, options)) {\n      var nextIndentation = options.noAlign ? 0 : maxIndexLength - i.length;\n      key += renderToArray(data[i], options, nextIndentation)[0];\n      output.push(key); // If the index is an array or object, render it in next line\n    } else {\n      output.push(key);\n      output.push.apply(output, renderToArray(data[i], options, indentation + options.defaultIndentation));\n    }\n  });\n  return output;\n}; // ### Render function\n// *Parameters:*\n//\n// * **`data`**: Data to render\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)',    // Rendered message on empty strings\n//       keysColor: 'blue',           // Color for keys in hashes\n//       dashColor: 'red',            // Color for the dashes in arrays\n//       stringColor: 'grey',         // Color for strings\n//       multilineStringColor: 'cyan' // Color for multiline strings\n//       defaultIndentation: 2        // Indentation on nested objects\n//     }\n\n\nexports.render = function render(data, options, indentation) {\n  // Default values\n  indentation = indentation || 0;\n  options = options || {};\n  options.emptyArrayMsg = options.emptyArrayMsg || '(empty array)';\n  options.keysColor = options.keysColor || 'green';\n  options.dashColor = options.dashColor || 'green';\n  options.numberColor = options.numberColor || 'blue';\n  options.positiveNumberColor = options.positiveNumberColor || options.numberColor;\n  options.negativeNumberColor = options.negativeNumberColor || options.numberColor;\n  options.defaultIndentation = options.defaultIndentation || 2;\n  options.noColor = !!options.noColor;\n  options.noAlign = !!options.noAlign;\n  options.escape = !!options.escape;\n  options.renderUndefined = !!options.renderUndefined;\n  options.stringColor = options.stringColor || null;\n  options.multilineStringColor = options.multilineStringColor || null;\n  return renderToArray(data, options, indentation).join('\\n');\n}; // ### Render from string function\n// *Parameters:*\n//\n// * **`data`**: Data to render as a string\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)', // Rendered message on empty strings\n//       keysColor: 'blue',        // Color for keys in hashes\n//       dashColor: 'red',         // Color for the dashes in arrays\n//       defaultIndentation: 2     // Indentation on nested objects\n//     }\n\n\nexports.renderString = function renderString(data, options, indentation) {\n  var output = '';\n  var parsedData; // If the input is not a string or if it's empty, just return an empty string\n\n  if (typeof data !== 'string' || data === '') {\n    return '';\n  } // Remove non-JSON characters from the beginning string\n\n\n  if (data[0] !== '{' && data[0] !== '[') {\n    var beginingOfJson;\n\n    if (data.indexOf('{') === -1) {\n      beginingOfJson = data.indexOf('[');\n    } else if (data.indexOf('[') === -1) {\n      beginingOfJson = data.indexOf('{');\n    } else if (data.indexOf('{') < data.indexOf('[')) {\n      beginingOfJson = data.indexOf('{');\n    } else {\n      beginingOfJson = data.indexOf('[');\n    }\n\n    output += data.substr(0, beginingOfJson) + '\\n';\n    data = data.substr(beginingOfJson);\n  }\n\n  try {\n    parsedData = JSON.parse(data);\n  } catch (e) {\n    // Return an error in case of an invalid JSON\n    return colors.red('Error:') + ' Not valid JSON!';\n  } // Call the real render() method\n\n\n  output += exports.render(parsedData, options, indentation);\n  return output;\n};","map":{"version":3,"names":["colors","require","Utils","conflictChars","exports","version","isPrintable","input","options","undefined","renderUndefined","isSerializable","onlyPrimitives","Date","indexOf","inlineArrays","Array","isArray","addColorToData","noColor","stringColor","sInput","green","red","grey","positiveNumberColor","negativeNumberColor","join","colorMultilineString","line","multilineStringColor","indentLines","string","spaces","lines","split","map","indent","renderToArray","data","indentation","match","escape","JSON","stringify","defaultIndentation","length","emptyArrayMsg","outputArray","forEach","element","dashColor","push","apply","Error","message","stack","maxIndexLength","noAlign","getMaxIndexLength","key","output","Object","getOwnPropertyNames","i","keysColor","nextIndentation","render","numberColor","renderString","parsedData","beginingOfJson","substr","parse","e"],"sources":["/home/jimd325/projects/courses/401/classRepo/seattle-javascript-401n21/classes/class-26/lab/RESTy/starter-code/node_modules/prettyjson/lib/prettyjson.js"],"sourcesContent":["'use strict';\n\n// ### Module dependencies\nvar colors = require('colors/safe');\nvar Utils = require('./utils');\n\nvar conflictChars = /[^\\w\\s\\n\\r\\v\\t\\.,]/i;\n\nexports.version = require('../package.json').version;\n\n// Helper function to detect if an object should be printed or ignored\nvar isPrintable = function(input, options) {\n  return input !== undefined || options.renderUndefined;\n};\n\n// Helper function to detect if an object can be directly serializable\nvar isSerializable = function(input, onlyPrimitives, options) {\n  if (\n    typeof input === 'boolean' ||\n    typeof input === 'number' ||\n    typeof input === 'function' ||\n    input === null ||\n    input === undefined ||\n    input instanceof Date\n  ) {\n    return true;\n  }\n  if (typeof input === 'string' && input.indexOf('\\n') === -1) {\n    return true;\n  }\n\n  if (options.inlineArrays && !onlyPrimitives) {\n    if (Array.isArray(input) && isSerializable(input[0], true, options)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar addColorToData = function(input, options) {\n  if (options.noColor) {\n    return input;\n  }\n\n  if (typeof input === 'string') {\n    // Print strings in regular terminal color\n    return options.stringColor ? colors[options.stringColor](input) : input;\n  }\n\n  var sInput = input + '';\n\n  if (input === true) {\n    return colors.green(sInput);\n  }\n  if (input === false) {\n    return colors.red(sInput);\n  }\n  if (input === null || input === undefined) {\n    return colors.grey(sInput);\n  }\n  if (typeof input === 'number') {\n    if (input >= 0) {\n      return colors[options.positiveNumberColor](sInput);\n    } else {\n      return colors[options.negativeNumberColor](sInput);\n    }\n  }\n  if (typeof input === 'function') {\n    return 'function() {}';\n  }\n\n  if (Array.isArray(input)) {\n    return input.join(', ');\n  }\n\n  return sInput;\n};\n\nvar colorMultilineString = function(options, line) {\n    if (options.multilineStringColor === null || options.noColor) {\n        return line;\n    } else {\n        return colors[options.multilineStringColor](line);\n    }\n};\n\nvar indentLines = function(string, spaces, options){\n  var lines = string.split('\\n');\n  lines = lines.map(function(line){\n    return Utils.indent(spaces) + colorMultilineString(options, line);\n  });\n  return lines.join('\\n');\n};\n\nvar renderToArray = function(data, options, indentation) {\n\n  if (typeof data === 'string' && data.match(conflictChars) &&\n      options.escape) {\n    data = JSON.stringify(data);\n  }\n\n  if (!isPrintable(data, options)) {\n    return [];\n  }\n\n  if (isSerializable(data, false, options)) {\n    return [Utils.indent(indentation) + addColorToData(data, options)];\n  }\n\n  // Unserializable string means it's multiline\n  if (typeof data === 'string') {\n    return [\n      Utils.indent(indentation) + colorMultilineString(options, '\"\"\"'),\n      indentLines(data, indentation + options.defaultIndentation, options),\n      Utils.indent(indentation) + colorMultilineString(options, '\"\"\"')\n    ];\n  }\n\n  if (Array.isArray(data)) {\n    // If the array is empty, render the `emptyArrayMsg`\n    if (data.length === 0) {\n      return [Utils.indent(indentation) + options.emptyArrayMsg];\n    }\n\n    var outputArray = [];\n\n    data.forEach(function(element) {\n      if (!isPrintable(element, options)) {\n        return;\n      }\n\n      // Prepend the dash at the begining of each array's element line\n      var line = '- ';\n      if (!options.noColor) {\n        line = colors[options.dashColor](line);\n      }\n      line = Utils.indent(indentation) + line;\n\n      // If the element of the array is a string, bool, number, or null\n      // render it in the same line\n      if (isSerializable(element, false, options)) {\n        line += renderToArray(element, options, 0)[0];\n        outputArray.push(line);\n\n      // If the element is an array or object, render it in next line\n      } else {\n        outputArray.push(line);\n        outputArray.push.apply(\n          outputArray,\n          renderToArray(\n            element, options, indentation + options.defaultIndentation\n          )\n        );\n      }\n    });\n\n    return outputArray;\n  }\n\n  if (data instanceof Error) {\n    return renderToArray(\n      {\n        message: data.message,\n        stack: data.stack.split('\\n')\n      },\n      options,\n      indentation\n    );\n  }\n\n  // If values alignment is enabled, get the size of the longest index\n  // to align all the values\n  var maxIndexLength = options.noAlign ? 0 : Utils.getMaxIndexLength(data);\n  var key;\n  var output = [];\n\n  Object.getOwnPropertyNames(data).forEach(function(i) {\n    if (!isPrintable(data[i], options)) {\n      return;\n    }\n\n    // Prepend the index at the beginning of the line\n    key = (i + ': ');\n    if (!options.noColor) {\n      key = colors[options.keysColor](key);\n    }\n    key = Utils.indent(indentation) + key;\n\n    // If the value is serializable, render it in the same line\n    if (isSerializable(data[i], false, options)) {\n      var nextIndentation = options.noAlign ? 0 : maxIndexLength - i.length;\n      key += renderToArray(data[i], options, nextIndentation)[0];\n      output.push(key);\n\n      // If the index is an array or object, render it in next line\n    } else {\n      output.push(key);\n      output.push.apply(\n        output,\n        renderToArray(\n          data[i],\n          options,\n          indentation + options.defaultIndentation\n        )\n      );\n    }\n  });\n  return output;\n};\n\n// ### Render function\n// *Parameters:*\n//\n// * **`data`**: Data to render\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)',    // Rendered message on empty strings\n//       keysColor: 'blue',           // Color for keys in hashes\n//       dashColor: 'red',            // Color for the dashes in arrays\n//       stringColor: 'grey',         // Color for strings\n//       multilineStringColor: 'cyan' // Color for multiline strings\n//       defaultIndentation: 2        // Indentation on nested objects\n//     }\nexports.render = function render(data, options, indentation) {\n  // Default values\n  indentation = indentation || 0;\n  options = options || {};\n  options.emptyArrayMsg = options.emptyArrayMsg || '(empty array)';\n  options.keysColor = options.keysColor || 'green';\n  options.dashColor = options.dashColor || 'green';\n  options.numberColor = options.numberColor || 'blue';\n  options.positiveNumberColor = options.positiveNumberColor\n    || options.numberColor;\n  options.negativeNumberColor = options.negativeNumberColor\n    || options.numberColor;\n  options.defaultIndentation = options.defaultIndentation || 2;\n  options.noColor = !!options.noColor;\n  options.noAlign = !!options.noAlign;\n  options.escape = !!options.escape;\n  options.renderUndefined = !!options.renderUndefined;\n\n  options.stringColor = options.stringColor || null;\n  options.multilineStringColor = options.multilineStringColor || null;\n\n  return renderToArray(data, options, indentation).join('\\n');\n};\n\n// ### Render from string function\n// *Parameters:*\n//\n// * **`data`**: Data to render as a string\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)', // Rendered message on empty strings\n//       keysColor: 'blue',        // Color for keys in hashes\n//       dashColor: 'red',         // Color for the dashes in arrays\n//       defaultIndentation: 2     // Indentation on nested objects\n//     }\nexports.renderString = function renderString(data, options, indentation) {\n\n  var output = '';\n  var parsedData;\n  // If the input is not a string or if it's empty, just return an empty string\n  if (typeof data !== 'string' || data === '') {\n    return '';\n  }\n\n  // Remove non-JSON characters from the beginning string\n  if (data[0] !== '{' && data[0] !== '[') {\n    var beginingOfJson;\n    if (data.indexOf('{') === -1) {\n      beginingOfJson = data.indexOf('[');\n    } else if (data.indexOf('[') === -1) {\n      beginingOfJson = data.indexOf('{');\n    } else if (data.indexOf('{') < data.indexOf('[')) {\n      beginingOfJson = data.indexOf('{');\n    } else {\n      beginingOfJson = data.indexOf('[');\n    }\n    output += data.substr(0, beginingOfJson) + '\\n';\n    data = data.substr(beginingOfJson);\n  }\n\n  try {\n    parsedData = JSON.parse(data);\n  } catch (e) {\n    // Return an error in case of an invalid JSON\n    return colors.red('Error:') + ' Not valid JSON!';\n  }\n\n  // Call the real render() method\n  output += exports.render(parsedData, options, indentation);\n  return output;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}