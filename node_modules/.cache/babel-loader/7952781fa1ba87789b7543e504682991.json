{"ast":null,"code":"var _jsxFileName = \"/home/jimd325/projects/courses/401/classRepo/seattle-javascript-401n21/classes/class-26/lab/RESTy/starter-code/src/components/form/form.tsx\",\n    _s = $RefreshSig$();\n\nimport './form.scss';\nimport { Body } from \"../body/body\";\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//Change state.body to undefined if the a method is selected which does not require the body\nexport const changeMethod = (state, method) => {\n  if (method === \"GET\" || method === \"PUT\") {\n    state.body = undefined;\n  }\n\n  return { ...state,\n    method\n  };\n};\nexport const changeUrl = (state, url) => {\n  state.url = url;\n  console.log(\"State on change URL ---> \", state);\n  return state;\n}; // Change state.body to an object if the a method is selected which does not require the body\n\nexport const setBody = (state, body) => {\n  if (state.method !== \"GET\" && state.method !== \"PUT\") {\n    state.body = body;\n  }\n\n  ;\n  return state;\n};\nexport const dispatchAction = (state, action) => {\n  switch (action.action) {\n    case 'method':\n      // as used below is a type assertion, and tells the compiler to consider the type as other than the type potentially inferred by the compiler. because type is set to unkown, we can specify that the type of action.body should be the type of what is to the right of the as keyword. \n      return changeMethod(state, action.body);\n\n    case 'body':\n      return setBody(state, action.body);\n    // case 'url':\n\n    case 'url':\n      console.log(\"action.body and state on changeURL dispatch\", action.body, state);\n      return changeUrl(state, action.body);\n\n    default:\n      return state;\n  }\n};\nexport const Form = props => {\n  _s();\n\n  const handleSubmit = (e, callback) => {\n    e.preventDefault();\n    e.stopPropagation();\n    let formData = {\n      method: state.method,\n      url: e.target[0].value\n    };\n    callback(formData);\n  };\n\n  const [state, dispatch] = useReducer(dispatchAction, {\n    method: \"GET\",\n    url: \"http://localhost:3000\",\n    body: undefined\n  });\n\n  const updateMethod = (e, method) => {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch({\n      action: \"method\",\n      body: method\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleSubmit(e, props.APICall),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Enter URL: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"url\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"GO!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"methods\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(e, \"GET\"),\n          value: \"GET\",\n          children: \"GET\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(e, \"POST\"),\n          value: \"POST\",\n          children: \"POST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(e, \"PUT\"),\n          value: \"PUT\",\n          children: \"PUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => updateMethod(e, \"DELETE\"),\n          value: \"DELETE\",\n          children: \"DELETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), state.method === \"POST\" || state.method === \"PUT\" ? /*#__PURE__*/_jsxDEV(Body, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 60\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(Form, \"oDg3vRqnIdJUkq1oO2utDZKChvo=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["Body","useReducer","changeMethod","state","method","body","undefined","changeUrl","url","console","log","setBody","dispatchAction","action","Form","props","handleSubmit","e","callback","preventDefault","stopPropagation","formData","target","value","dispatch","updateMethod","APICall"],"sources":["/home/jimd325/projects/courses/401/classRepo/seattle-javascript-401n21/classes/class-26/lab/RESTy/starter-code/src/components/form/form.tsx"],"sourcesContent":["\nimport './form.scss';\nimport { Body } from \"../body/body\"\nimport { useState, useReducer, useCallback } from 'react';\nimport { url } from 'inspector';\n\n\n\n// everything with these properties will be treated as the type \"FormState\"\n// interface is used to make types that you specify. \n// follows principals of \"duck typing\"\nexport interface FormState {\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n  url: string;\n  body: object | undefined;\n}\n\n//Change state.body to undefined if the a method is selected which does not require the body\nexport const changeMethod = (\n  state: FormState,\n  method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n) => {\n\n  if (method === \"GET\" || method === \"PUT\") {\n    state.body = undefined\n  } return {\n    ...state, method\n  };\n};\n\nexport const changeUrl = (\n  state: FormState,\n  url: string\n) => {\n  state.url = url;\n  console.log(\"State on change URL ---> \", state);\n  return state\n}\n\n// Change state.body to an object if the a method is selected which does not require the body\nexport const setBody = (\n  state: FormState,\n  body: object\n) => {\n  if (state.method !== \"GET\" && state.method !== \"PUT\") {\n    state.body = body;\n  };\n  return state;\n}\n\nexport const dispatchAction = (\n  state: FormState,\n  action: {\n    action: string,\n    body: unknown,\n  }) => {\n  switch (action.action) {\n    case 'method':\n      // as used below is a type assertion, and tells the compiler to consider the type as other than the type potentially inferred by the compiler. because type is set to unkown, we can specify that the type of action.body should be the type of what is to the right of the as keyword. \n      return changeMethod(state, action.body as 'GET' | 'POST' | 'PUT' | \"DELETE\");\n    case 'body':\n      return setBody(state, action.body as object);\n    // case 'url':\n    case 'url':\n      console.log(\"action.body and state on changeURL dispatch\", action.body, state);\n      return changeUrl(state, action.body as string)\n    default:\n      return state;\n  }\n}\n\nexport const Form = (props: any) => {\n\n  const handleSubmit = (e: any, callback: Function) => {\n    e.preventDefault();\n    e.stopPropagation();\n    let formData = {\n      method: state.method,\n      url: e.target[0].value,\n    };\n    callback(formData);\n\n  }\n\n  const [state, dispatch] = useReducer(dispatchAction, {\n    method: \"GET\",\n    url: \"http://localhost:3000\",\n    body: undefined,\n  });\n\n\n\n  const updateMethod = (e:any, method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\") => {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch ({action: \"method\", body: method})\n  }\n\n\n\n  return (\n    <>\n      <form onSubmit ={(e) => handleSubmit(e, props.APICall)} >\n        <label >\n          <span>Enter URL: </span>\n          <input name='url' type='text' />\n          <button type=\"submit\">GO!</button>\n        </label>\n        <div className=\"methods\">\n          <button onClick={(e) => updateMethod(e,\"GET\")}  value=\"GET\" >GET</button>\n          <button onClick={(e) => updateMethod(e,\"POST\")} value=\"POST\">POST</button>\n          <button onClick={(e) => updateMethod(e, \"PUT\")} value=\"PUT\">PUT</button>\n          <button onClick={(e) => updateMethod(e, \"DELETE\")} value=\"DELETE\">DELETE</button>\n        </div>\n      </form>\n      {/* have a conditional render on the body, then */}\n      {state.method === \"POST\" || state.method === \"PUT\" ? <Body /> : null}\n       {/* {console.log(state)}; */}\n    </>\n  \n  );\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}